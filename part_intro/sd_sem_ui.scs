.system_element_518
=> nrel_inclusion: [*
	=> .system_element_38: .system_element_519;;

	.system_element_520
	<- .system_element_2;
	-> rrel_studied_object_class: 
		.system_element_521
	;
	-> rrel_studied_object_class: 
		.system_element_522;
		.system_element_523;
		.system_element_524;
		.system_element_525
	;;

	.system_element_521
	=> nrel_inclusion: .system_element_526;
	=> nrel_inclusion: .system_element_527;
	=> nrel_inclusion: .system_element_528;
	=> nrel_inclusion: .system_element_524
	(*
		=> nrel_inclusion: .system_element_525;;
	*);;

	.system_element_526
	=> nrel_explanation: [<p>подход на основе специализированных языковописания предполагает представление конкретного пользовательского интерфейса вплатформенно независимом виде. В качестве примеров языков описания интерфейсаможно привести UIML (ABRAMS19991695), UsiXML (UsiXML), XForms(XForms) и FXML (fxml). Ключевой идеей представленных языковявляется создание модели диалогов и форм интерфейса в независимом отиспользуемой технологии виде, описание визуальных элементов, а такжевзаимосвязей между ними и их свойств для создания конкретного пользовательскогоинтерфейса.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_529: {
		[<p>как  правило,  спецификация  модели  интерфейса являетсянеполной,  чтоприводит  к  сложности автоматизации процесса генерациипользовательского интерфейса</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>как правило, созданные модели специфичны для конкретнойплатформы либо конкретной реализации пользовательского интерфейса, чтопрепятствует их повторному использованию для других целей.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>решения,которые   предлагают   платформенно независимоеописание,  позволяют  генерировать лишь  простые  ограниченные  пофункционалу пользовательские интерфейсы (приложения-опросники, диаграммы ит.д.).</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};;

	.system_element_527
	=> nrel_explanation: [<p>Контекстно-зависимый подход интегрируетиспользование структурного описания интерфейса на основе языков описания споведенческой спецификацией, то есть генерация интерфейса основывается надействиях пользователя. В рамках подхода специфицируются переходы междуразличными видами конкретного пользовательского интерфейса. В качестве примеровязыков, реализующих идеи такого подхода можно привести CAP3 (CAP3) иMARIA (MARIA).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_528
	=> nrel_explanation: [<p>подход на основе данных или моделеориентированныйподход использует модель предметной области в качестве основы для созданияпользовательских интерфейсов. Указанный подход реализуется в таких проектах,как JANUS (JANUS) и Mecano (Mecano).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_524
	=> nrel_explanation: [<p>cуществующие онтологические подходы как правилооснованы на представленных ранее подходах и используют онтологии в качествеспособа представления информации о конкретном пользовательском интерфейсе.Например, по аналогии с подходом на основе специализированных языков описания,был предложен фреймворк  (ui_model-based-approach), использующийонтологию для описания пользовательского интерфейса на основе понятий,хранящихся в базе знаний. По аналогии с контекстно-зависимым подходом в рамкахработы gaulke используется модель предметной области совместно с модельюпользовательского интерфейса, ассоциированная с онтологией действий. ПроектActiveRaUL (ActiveRaUL) совмещает UIML с моделеориентированным подходом.В рамках данного проекта онтологическая модель предметной областисопоставляется с онтологическим представлением пользовательского интерфейса.Подход, предложенный в работе hitz, совмещает данные приложения сонтологией пользовательского интерфейса для создания единого описания в базезнаний с целью последующей автоматической генерации различных вариантовинтерфейса для приложений-опросников с готовыми сценариями взаимодействия спользователем. Следует также отметить работы vladivostok1 иvladivostok2, в рамках которых предложена концепция, позволяющаяобъединить однородную по содержанию информацию в компоненты модели интерфейса,освободить разработчика интерфейса от кодирования и формировать информацию длякаждого компонента модели интерфейса с помощью редакторов, управляемыхсоответствующими моделями онтологий.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_529: {
		[<p>актуальна проблема совместимости различных онтологий врамках единой системы</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>отсутствие способности адаптироватьсяк запросампользователя и анализировать его действия длясамостоятельногосовершенствования.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};
	=> .system_element_17: {
		[<p>позволяет интегрировать ранее предложенные подходы за счетединого способа представления знаний.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>позволяет создать наиболее полное описание различныхаспектов пользовательского интерфейса.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>упрощает повторное использование интерфейса.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};;

	.system_element_525
	=> nrel_note: [<p>для проектирования пользовательских интерфейсовпредлагается использовать <b><i>онтологический подход к построениюпользовательского интерфейса на основе логико-семантической модели</i></b>,обладающий рядом важных достоинств.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_17: {
		[<p>возможность переноса пользовательских интерфейсов с однойплатформы реализации на другую.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>наличие общих    принципов построения пользовательскихинтерфейсов, что позволяет повторно использовать уже разработанные компонентыи  снижает сроки  обучения  пользователя  новым  для  него пользовательскиминтерфейсам.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>возможность модификации пользовательского интерфейса впроцессе работы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>возможность гибкой адаптации пользовательского интерфейсапод нужды конкретного пользователя.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};
	=> nrel_explanation: [<p>подход предполагает создание полной семантическоймодели интерфейса, содержащей  лексическое описание  интерфейса(описаниекомпонентов, из которых формируется интерфейс), синтаксическоеописаниеинтерфейса(правила  формирования  корректного  и  полного интерфейса из егокомпонентов), но также и его семантическое описание (знание о том, знаком какойсущности является отображаемый компонент). При этом семантическое описаниетакже включает всебя назначение, область применения компонентов интерфейса,описание интерфейсной деятельности пользователя.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_530: {
		[<p>пользовательский интерфейс представляет собойспециализированную ostis-систему, ориентированную на решение интерфейсныхзадач,и имеющую в составе базу знаний и машину обработки знанийпользовательского интерфейса,что даёт возможность пользователю адресоватьпользовательскому интерфейсу различного рода вопросы</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>используется онтологический подход к проектированиюпользовательского интерфейса, чтоспособствует чёткому разделению деятельностиразличных разработчиков пользовательских интерфейсов, а также унификациипринципов проектирования</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>используется SC-код в качестве формальногоязыкавнутреннего представления знаний (онтологий, предметных областей и др.),благодарячему обеспечивается легкость интерпретацииэтих знаний и системой, ичеловеком - пользователем или разработчиком, а также однозначность восприятияэтой информации ими</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>средствами SC-кода с помощью соответствующих онтологийописываются синтаксис и семантика всевозможных используемых внешнихязыков</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>трансляции с внутреннего языка на внешний иобратноорганизовываются так, чтобы механизмы трансляции не зависели от внешнего языка,для реализации нового специализированногоязыка в таком случае необходимо будеттолькоописать его синтаксис и семантику, универсальная же модель трансляции небудет зависеть отданного описания</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>предполагается выбор стилей визуализации,осуществляемый взависимости от вида отображаемых знаний (например, использование различныхэлементов визуализации для одних видов знаний и других - для других), чтопозволит пользователю быстрее обучаться новымспециализированным языкам, а такжесделатьпростым и понятным отображение знаний</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>модель пользовательского интерфейса строитсянезависимо отреализации платформы интерпретации такой модели, что позволяет легкопереноситьразработанную модель на разныеплатформы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};;
*];;
